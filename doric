#!/usr/bin/ruby

require "net/http"
require "optparse"
require "json"

API_BASE_URL="https://api.github.com"

def debug(message)
  puts "#{Time.now}: #{message}" if @options[:verbose]
end

def find_resource(url, finder = ->(*) { false })
  debug "Looking for resource at: '#{url}'"
  response, resource = get_resource(url)

  if wanted_resource = finder.call(resource)
    debug "Found resource: #{resource}"
    return wanted_resource
  else
    if next_url = extract_next_page(response["Link"])
      debug "More to do..."
      find_resource(next_url, finder)
    else
      debug "Exhausted all options. Couldn't find resource"
      return nil
    end
  end
end

def find_project(url)
  if cached_project = @cache["#{@options[:org]}:#{@options[:project]}"]
    debug "Found cached project..."
    return cached_project
  end

  debug "Looking for project at: '#{url}'"
  project = find_resource(
    url,
    -> (projects) {
      projects.find { |project| project["name"] == @options[:project] }
    }
  )

  if project.nil?
    debug "Couldn't find project"
  else
    @cache["#{@options[:org]}:#{@options[:project]}"] = project
  end

  project
end

def find_column(url)
  column = find_resource(
    url,
    -> (columns) {
      columns.find { |column| column["name"] == @options[:column] }
    }
  )

  if column.nil?
    debug "Couldn't find column matching #{@options[:column]}"
  end

  column
end

def extract_next_page(link_header)
  return if link_header.nil?
  raw_pieces = link_header.split(",")
  pieces = raw_pieces.inject({}) do |final, piece|
    url, rel = piece.split(";")
    url = url.gsub("<", "")&.gsub(">", "").strip
    rel = rel.gsub("rel=", "")&.gsub('"', "").strip
    debug url
    debug rel

    final[rel] = url
    final
  end
  pieces["next"]
end

def get_resources(url, all_resources = [])
  response, resource = get_resource(url)
  all_resources.concat(resource)

  if next_page = extract_next_page(response["Link"])
    # TODO: test that this actually works on a resource with multiple pages
    debug("get_resources. Moving to next page: #{next_page}")
    get_resources(next_page, all_resources)
  else
    return all_resources
  end
end

def get_resource(url)
  uri = URI(url)
  Net::HTTP.start(uri.host, uri.port, use_ssl: true) do |http|
    request = Net::HTTP::Get.new(uri)
    request["Authorization"] = "bearer #{@access_token}"
    request["Accept"] = "application/vnd.github.inertia-preview+json"

    response = http.request request

    [response, JSON.parse(response.body)]
  end
end

def read_cache
  Marshal.load(File.read(File.join(File.dirname(__FILE__), "doric.cache")))
rescue Errno::ENOENT
  {}
end

def write_cache!
  File.open(File.join(File.dirname(__FILE__), "doric.cache"), "w+") do |f|
    f.puts(Marshal.dump(@cache))
  end
end

@cache = read_cache

if __FILE__ == $0
  @access_token = ENV["PAT"]
  if @access_token.nil?
    puts "Set a PAT environment variable"
    exit 1
  end

  @options = {}
  OptionParser.new do |opts|
    opts.banner = "Usage: example.rb [options]"

    opts.on("-v", "--verbose", "Verbose output") { |v| @options[:verbose] = v }
    opts.on("-oORG", "--organization=ORG", "GitHub Organiztaion") { |o| @options[:org] = o }
    opts.on("-pPROJECT", "--project=PROJECT", "Project name") { |p| @options[:project] = p }
    opts.on("-cCOLUMN", "--column=COLUMN", "Project column") { |c| @options[:column] = c }
  end.parse!

  if @options[:org].nil? || @options[:project].nil? || @options[:column].nil?
    puts "Please supply --organization, --project and --column"
    exit 1
  end

  start_url = "#{API_BASE_URL}/orgs/#{@options[:org]}/projects"
  if wanted_project = find_project(start_url)
    start_url = "#{API_BASE_URL}/projects/#{wanted_project["id"]}/columns"
    if wanted_column = find_column(start_url)
      cards_url = "#{API_BASE_URL}/projects/columns/#{wanted_column["id"]}/cards"
      cards = get_resources(cards_url)
      cards.each do |card|
        debug "Card: #{card["url"]}"
        debug "Card content_url: #{card["content_url"]}"
        _, content = get_resource(card["url"])
        if content["content_url"]
          # get actual content
          _, linked_content = get_resource(content["content_url"])
          puts "#{linked_content["html_url"]}: #{linked_content["title"]}"
        end
      end
    else
      debug "Couldn't find column matching #{@options[:column]}"
    end
  else
    debug "No project found matching #{@options[:project]}"
  end

  write_cache!
end
